{"ast":null,"code":"var _jsxFileName = \"/Users/kaitlynbreuil/Desktop/Wyncode-ish/authenticated-blog/client/src/context/AppContext.jsx\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nconst AppContext = createContext();\n\nconst AppContextProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState([]);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [blogs, setBlogs] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [blog, setBlog] = useState([]);\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    if (token) {\n      axios.get('/users', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(({\n        data\n      }) => {\n        setUser(data);\n        setLoggedIn(true);\n      }).catch(e => console.log(e.message.toString()));\n    }\n  }, [token]);\n  useEffect(() => {\n    if (token) {\n      axios.get(`/blogs`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(({\n        data\n      }) => {\n        setBlogs(data);\n      }).catch(e => console.log(e.message.toString()));\n    }\n  }, [loggedIn, token]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      user,\n      setUser,\n      loggedIn,\n      setLoggedIn,\n      email,\n      setEmail,\n      blogs,\n      setBlogs,\n      username,\n      setUsername,\n      password,\n      setPassword,\n      comments,\n      setComments,\n      blog,\n      setBlog\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { AppContext, AppContextProvider };","map":{"version":3,"sources":["/Users/kaitlynbreuil/Desktop/Wyncode-ish/authenticated-blog/client/src/context/AppContext.jsx"],"names":["React","createContext","useState","useEffect","axios","AppContext","AppContextProvider","children","user","setUser","username","setUsername","password","setPassword","email","setEmail","loggedIn","setLoggedIn","blogs","setBlogs","comments","setComments","blog","setBlog","token","localStorage","getItem","get","headers","Authorization","then","data","catch","e","console","log","message","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,UAAU,GAAGJ,aAAa,EAAhC;;AAEA,MAAMK,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMsB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,KAAJ,EAAW;AACTpB,MAAAA,KAAK,CACFuB,GADH,CACO,QADP,EACiB;AACbC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASL,KAAM;AAAjC;AADI,OADjB,EAIGM,IAJH,CAIQ,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AAClBtB,QAAAA,OAAO,CAACsB,IAAD,CAAP;AACAd,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD,OAPH,EAQGe,KARH,CAQUC,CAAD,IAAOC,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAF,CAAUC,QAAV,EAAZ,CARhB;AASD;AACF,GAZQ,EAYN,CAACb,KAAD,CAZM,CAAT;AAcArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,KAAJ,EAAW;AACTpB,MAAAA,KAAK,CACFuB,GADH,CACQ,QADR,EACiB;AAAEC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASL,KAAM;AAAjC;AAAX,OADjB,EAEGM,IAFH,CAEQ,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AAClBZ,QAAAA,QAAQ,CAACY,IAAD,CAAR;AACD,OAJH,EAKGC,KALH,CAKUC,CAAD,IAAOC,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAF,CAAUC,QAAV,EAAZ,CALhB;AAMD;AACF,GATQ,EASN,CAACrB,QAAD,EAAWQ,KAAX,CATM,CAAT;AAWA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AACLhB,MAAAA,IADK;AAELC,MAAAA,OAFK;AAGLO,MAAAA,QAHK;AAILC,MAAAA,WAJK;AAKLH,MAAAA,KALK;AAMLC,MAAAA,QANK;AAOLG,MAAAA,KAPK;AAQLC,MAAAA,QARK;AASLT,MAAAA,QATK;AAULC,MAAAA,WAVK;AAWLC,MAAAA,QAXK;AAYLC,MAAAA,WAZK;AAaLO,MAAAA,QAbK;AAcLC,MAAAA,WAdK;AAeLC,MAAAA,IAfK;AAgBLC,MAAAA;AAhBK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAoBGhB,QApBH,CADF;AAwBD,CA7DD;;AA+DA,SAASF,UAAT,EAAqBC,kBAArB","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst AppContext = createContext();\n\nconst AppContextProvider = ({ children }) => {\n  const [user, setUser] = useState([]);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [blogs, setBlogs] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [blog, setBlog] = useState([]);\n\n  const token = localStorage.getItem('token');\n\n  useEffect(() => {\n    if (token) {\n      axios\n        .get('/users', {\n          headers: { Authorization: `Bearer ${token}` }\n        })\n        .then(({ data }) => {\n          setUser(data);\n          setLoggedIn(true);\n        })\n        .catch((e) => console.log(e.message.toString()));\n    }\n  }, [token]);\n\n  useEffect(() => {\n    if (token) {\n      axios\n        .get(`/blogs`, { headers: { Authorization: `Bearer ${token}` } })\n        .then(({ data }) => {\n          setBlogs(data);\n        })\n        .catch((e) => console.log(e.message.toString()));\n    }\n  }, [loggedIn, token]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        user,\n        setUser,\n        loggedIn,\n        setLoggedIn,\n        email,\n        setEmail,\n        blogs,\n        setBlogs,\n        username,\n        setUsername,\n        password,\n        setPassword,\n        comments,\n        setComments,\n        blog,\n        setBlog\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport { AppContext, AppContextProvider };\n"]},"metadata":{},"sourceType":"module"}